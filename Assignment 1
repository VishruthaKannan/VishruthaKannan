-- Create the database--
CREATE DATABASE TechShop;
GO

-- Use the TechShop database--
USE TechShop;
GO

1. Customers Table--
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    Email NVARCHAR(100) UNIQUE NOT NULL,
    Phone NVARCHAR(15),
    Address NVARCHAR(255)
);
GO

2.Products Table--
CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY(1,1),
    ProductName NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    Price DECIMAL(10, 2) NOT NULL
);
GO

3. Orders Table--
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    CustomerID INT,
    OrderDate DATETIME DEFAULT GETDATE(),
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);
GO

4. OrderDetails Table--
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY IDENTITY(1,1),
    OrderID INT,
    ProductID INT,
    Quantity INT NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
GO

5. Inventory Table--
CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY IDENTITY(1,1),
    ProductID INT UNIQUE,
    QuantityInStock INT NOT NULL,
    LastStockUpdate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
GO
=====Insert Sample values=======

a. Customers
INSERT INTO Customers (FirstName, LastName, Email, Phone, Address)
VALUES
('John', 'Doe', 'john.doe@example.com', '123-456-7890', '123 Main St, New York, NY'),
('Jane', 'Smith', 'jane.smith@example.com', '234-567-8901', '456 Maple St, Chicago, IL'),
('Michael', 'Johnson', 'michael.j@example.com', '345-678-9012', '789 Pine St, Boston, MA'),
('Emily', 'Davis', 'emily.d@example.com', '456-789-0123', '321 Oak St, San Francisco, CA'),
('Daniel', 'Wilson', 'daniel.w@example.com', '567-890-1234', '987 Birch St, Seattle, WA'),
('Sophia', 'Martinez', 'sophia.m@example.com', '678-901-2345', '654 Cedar St, Austin, TX'),
('David', 'Anderson', 'david.a@example.com', '789-012-3456', '852 Elm St, Denver, CO'),
('Olivia', 'Thomas', 'olivia.t@example.com', '890-123-4567', '369 Spruce St, Miami, FL'),
('James', 'Garcia', 'james.g@example.com', '901-234-5678', '741 Willow St, Atlanta, GA'),
('Isabella', 'Lopez', 'isabella.l@example.com', '012-345-6789', '159 Redwood St, Dallas, TX');
GO
b. Products
INSERT INTO Products (ProductName, Description, Price)
VALUES
('Smartphone X', 'Latest model with high resolution camera', 699.99),
('Laptop Pro', '15-inch, 16GB RAM, 512GB SSD', 1199.50),
('Wireless Earbuds', 'Noise-cancelling, long battery life', 149.00),
('Smartwatch 5', 'Fitness tracking and notifications', 249.99),
('Gaming Console', 'Next-gen console with 1TB storage', 499.00),
('Bluetooth Speaker', 'Portable and waterproof', 99.95),
('Tablet Air', '10-inch display, 64GB storage', 329.00),
('Drone 4K', '4K camera with GPS tracking', 799.00),
('VR Headset', 'Immersive virtual reality experience', 349.99),
('Power Bank 20K', '20000mAh, fast charging', 49.99);
GO
c. Orders
INSERT INTO Orders (CustomerID, OrderDate, TotalAmount)
VALUES
(1, '2025-03-01', 849.98),
(2, '2025-03-02', 1199.50),
(3, '2025-03-03', 299.00),
(4, '2025-03-04', 499.00),
(5, '2025-03-05', 999.95),
(6, '2025-03-06', 329.00),
(7, '2025-03-07', 1148.99),
(8, '2025-03-08', 799.00),
(9, '2025-03-09', 349.99),
(10, '2025-03-10', 199.98);
GO
d.OrderDetails Table
INSERT INTO OrderDetails (OrderID, ProductID, Quantity)
VALUES
(1, 1, 1), -- Smartphone X
(1, 10, 3), -- Power Bank 20K
(2, 2, 1), -- Laptop Pro
(3, 4, 1), -- Smartwatch 5
(4, 5, 1), -- Gaming Console
(5, 3, 2), -- Wireless Earbuds
(6, 7, 1), -- Tablet Air
(7, 9, 1), -- VR Headset
(8, 8, 1), -- Drone 4K
(9, 6, 2); -- Bluetooth Speaker
GO
e.Inventory Table
INSERT INTO Inventory (ProductID, QuantityInStock, LastStockUpdate)
VALUES
(1, 50, GETDATE()),
(2, 30, GETDATE()),
(3, 100, GETDATE()),
(4, 40, GETDATE()),
(5, 20, GETDATE()),
(6, 60, GETDATE()),
(7, 25, GETDATE()),
(8, 15, GETDATE()),
(9, 35, GETDATE()),
(10, 80, GETDATE());
GO

=========================Tasks 2: Select, Where, Between, AND, LIKE:============================

1. Write an SQL query to retrieve the names and emails of all customers. 

SELECT 
    CONCAT(FirstName, ' ', LastName) AS FullName,
    Email
FROM 
    Customers;
2. Write an SQL query to list all orders with their order dates and corresponding customer
names.

SELECT 
    O.OrderID,
    O.OrderDate,
    CONCAT(C.FirstName, ' ', C.LastName) AS CustomerName
FROM 
    Orders O
JOIN 
    Customers C ON O.CustomerID = C.CustomerID;
3. Write an SQL query to insert a new customer record into the "Customers" table. Include
customer information such as name, email, and address.

INSERT INTO Customers (FirstName, LastName, Email, Phone, Address)
VALUES 
('Alex', 'Brown', 'alex.brown@example.com', '111-222-3333', '500 River St, Houston, TX');

4. Write an SQL query to update the prices of all electronic gadgets in the "Products" table by
increasing them by 10%.

UPDATE Products
SET Price = Price * 1.10;

5. Write an SQL query to delete a specific order and its associated order details from the
"Orders" and "OrderDetails" tables. Allow users to input the order ID as a parameter
DECLARE @OrderID INT = 5; -- Set the OrderID dynamically

-- Delete from OrderDetails first due to FK constraint
DELETE FROM OrderDetails
WHERE OrderID = @OrderID;

-- Delete from Orders
DELETE FROM Orders
WHERE OrderID = @OrderID;

6. Write an SQL query to insert a new order into the "Orders" table. Include the customer ID,
order date, and any other necessary information.

INSERT INTO Orders (CustomerID, OrderDate, TotalAmount)
VALUES 
(3, '2025-03-15', 649.99);

7. Write an SQL query to update the contact information (e.g., email and address) of a specific
customer in the "Customers" table. Allow users to input the customer ID and new contact
information.

DECLARE @CustomerID INT = 3; -- Specify the customer ID to update
DECLARE @NewEmail NVARCHAR(100) = 'michael.new@example.com'; -- New email
DECLARE @NewAddress NVARCHAR(255) = '123 New Pine St, Boston, MA'; -- New address

-- Update query
UPDATE Customers
SET 
    Email = @NewEmail,
    Address = @NewAddress
WHERE 
    CustomerID = @CustomerID;

8. Write an SQL query to recalculate and update the total cost of each order in the "Orders"
table based on the prices and quantities in the "OrderDetails" table.

UPDATE O
SET O.TotalAmount = (
    SELECT SUM(OD.Quantity * P.Price)
    FROM OrderDetails OD
    JOIN Products P ON OD.ProductID = P.ProductID
    WHERE OD.OrderID = O.OrderID
)
FROM Orders O;

9. Write an SQL query to delete all orders and their associated order details for a specific
customer from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID
as a parameter.

DECLARE @CustomerID INT = 3; -- Specify the CustomerID to delete orders

-- Delete from OrderDetails first due to FK constraint
DELETE FROM OrderDetails
WHERE OrderID IN (
    SELECT OrderID FROM Orders WHERE CustomerID = @CustomerID
);

-- Delete from Orders
DELETE FROM Orders
WHERE CustomerID = @CustomerID;

10. Write an SQL query to insert a new electronic gadget product into the "Products" table,
including product name, category, price, and any other relevant details.

INSERT INTO Products (ProductName, Description, Price)
VALUES 
('Smart Home Hub', 'AI-powered home automation device', 299.99);

11. Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from
"Pending" to "Shipped"). Allow users to input the order ID and the new status

ALTER TABLE Orders
ADD OrderStatus NVARCHAR(50) DEFAULT 'Pending';

12. Write an SQL query to calculate and update the number of orders placed by each customer
in the "Customers" table based on the data in the "Orders" table.

ALTER TABLE Customers
ADD OrderCount INT DEFAULT 0;

=========================Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:=========================

--01
-- Create customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
-- Insert sample data into customers
INSERT INTO customers (customer_id, first_name, last_name, email)
VALUES 
    (1, 'John', 'Doe', 'john.doe@example.com'),
    (2, 'Jane', 'Smith', 'jane.smith@example.com'),
    (3, 'Robert', 'Brown', 'robert.brown@example.com'),
    (4, 'Emily', 'Davis', 'emily.davis@example.com'),
    (5, 'Michael', 'Wilson', 'michael.wilson@example.com');

-- Insert sample data into orders
INSERT INTO orders (order_id, customer_id, order_date, total_amount)
VALUES 
    (101, 1, '2025-03-01', 1499.97),
    (102, 2, '2025-03-05', 699.97),
    (103, 3, '2025-03-10', 199.99),
    (104, 4, '2025-03-15', 999.99),
    (105, 1, '2025-03-20', 1249.97),
    (106, 5, '2025-03-22', 299.99);
SELECT 
    o.order_id,
    o.order_date,
    o.total_amount,
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email
FROM 
    orders o
JOIN 
    customers c 
ON 
    o.customer_id = c.customer_id
ORDER BY 
    o.order_date DESC;
-- View all customers
SELECT * FROM customers;

-- View all orders
SELECT * FROM orders;

-------------------------------------------------

--02
-- Create products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL
);

-- Create order_items table
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
-- Insert sample data into products
INSERT INTO products (product_id, product_name, unit_price)
VALUES 
    (1, 'Smartphone', 499.99),
    (2, 'Laptop', 999.99),
    (3, 'Tablet', 299.99),
    (4, 'Smartwatch', 199.99),
    (5, 'Bluetooth Speaker', 149.99);

-- Insert sample data into orders
INSERT INTO orders (order_id, order_date, total_amount)
VALUES 
    (101, '2025-03-01', 1499.97),
    (102, '2025-03-05', 699.97),
    (103, '2025-03-10', 199.99),
    (104, '2025-03-15', 999.99),
    (105, '2025-03-20', 1249.97);

-- Insert sample data into order_items
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price)
VALUES 
    (1, 101, 1, 2, 499.99), -- 2 Smartphones
    (2, 101, 2, 1, 999.99), -- 1 Laptop
    (3, 102, 3, 2, 299.99), -- 2 Tablets
    (4, 103, 4, 1, 199.99), -- 1 Smartwatch
    (5, 104, 2, 1, 999.99), -- 1 Laptop
    (6, 105, 1, 1, 499.99), -- 1 Smartphone
    (7, 105, 5, 5, 149.99); -- 5 Bluetooth Speakers
SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM 
    products p
JOIN 
    order_items oi 
ON 
    p.product_id = oi.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_revenue DESC;
-- View all products
SELECT * FROM products;

-- View all orders
SELECT * FROM orders;

-- View all order items
SELECT * FROM order_items;

--03
-- Create customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15)
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
-- Insert sample data into customers
INSERT INTO customers (customer_id, first_name, last_name, email, phone)
VALUES 
    (1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890'),
    (2, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210'),
    (3, 'Robert', 'Brown', 'robert.brown@example.com', '555-123-4567'),
    (4, 'Emily', 'Davis', 'emily.davis@example.com', '333-444-5555'),
    (5, 'Michael', 'Wilson', 'michael.wilson@example.com', '666-777-8888'),
    (6, 'Sarah', 'Miller', 'sarah.miller@example.com', '999-000-1111');

-- Insert sample data into orders
INSERT INTO orders (order_id, customer_id, order_date, total_amount)
VALUES 
    (101, 1, '2025-03-01', 1499.97),
    (102, 2, '2025-03-05', 699.97),
    (103, 3, '2025-03-10', 199.99),
    (104, 4, '2025-03-15', 999.99),
    (105, 1, '2025-03-20', 1249.97),
    (106, 5, '2025-03-22', 299.99);
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.phone
FROM 
    customers c
WHERE 
    c.customer_id IN (SELECT DISTINCT customer_id FROM orders);

--04
-- Create products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL
);

-- Create order_items table
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
-- Insert sample data into products
INSERT INTO products (product_id, product_name, unit_price)
VALUES 
    (1, 'Smartphone', 499.99),
    (2, 'Laptop', 999.99),
    (3, 'Tablet', 299.99),
    (4, 'Smartwatch', 199.99),
    (5, 'Bluetooth Speaker', 149.99);

-- Insert sample data into orders
INSERT INTO orders (order_id, order_date, total_amount)
VALUES 
    (101, '2025-03-01', 1499.97),
    (102, '2025-03-05', 699.97),
    (103, '2025-03-10', 199.99),
    (104, '2025-03-15', 999.99),
    (105, '2025-03-20', 1249.97);

-- Insert sample data into order_items
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, unit_price)
VALUES 
    (1, 101, 1, 2, 499.99), -- 2 Smartphones
    (2, 101, 2, 1, 999.99), -- 1 Laptop
    (3, 102, 3, 2, 299.99), -- 2 Tablets
    (4, 103, 4, 1, 199.99), -- 1 Smartwatch
    (5, 104, 2, 1, 999.99), -- 1 Laptop
    (6, 105, 1, 1, 499.99), -- 1 Smartphone
    (7, 105, 5, 5, 149.99); -- 5 Bluetooth Speakers
SELECT 
    p.product_name,
    SUM(oi.quantity) AS total_quantity_ordered
FROM 
    products p
JOIN 
    order_items oi 
ON 
    p.product_id = oi.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_quantity_ordered DESC
LIMIT 1;
-- View all products
SELECT * FROM products;

-- View all orders
SELECT * FROM orders;

-- View all order items
SELECT * FROM order_items;

--05
-- Create categories table
CREATE TABLE categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL
);

-- Create products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category_id INT,
    unit_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (category_id) REFERENCES categories(category_id)
);
-- Insert sample data into categories
INSERT INTO categories (category_id, category_name)
VALUES 
    (1, 'Smartphones'),
    (2, 'Laptops'),
    (3, 'Tablets'),
    (4, 'Wearables'),
    (5, 'Audio Devices');

-- Insert sample data into products
INSERT INTO products (product_id, product_name, category_id, unit_price)
VALUES 
    (1, 'iPhone 15', 1, 999.99),
    (2, 'Samsung Galaxy S23', 1, 899.99),
    (3, 'MacBook Pro', 2, 1999.99),
    (4, 'Dell XPS 13', 2, 1499.99),
    (5, 'iPad Air', 3, 599.99),
    (6, 'Samsung Galaxy Tab S8', 3, 649.99),
    (7, 'Apple Watch Series 8', 4, 399.99),
    (8, 'Fitbit Versa 4', 4, 199.99),
    (9, 'Bose QuietComfort 45', 5, 299.99),
    (10, 'Sony WH-1000XM5', 5, 349.99);
SELECT 
    p.product_id,
    p.product_name,
    c.category_name,
    p.unit_price
FROM 
    products p
JOIN 
    categories c 
ON 
    p.category_id = c.category_id
ORDER BY 
    c.category_name, p.product_name;
-- View all categories
SELECT * FROM categories;

-- View all products
SELECT * FROM products;

--06
-- Create customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15)
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
-- Insert sample data into customers
INSERT INTO customers (customer_id, first_name, last_name, email, phone)
VALUES 
    (1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890'),
    (2, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210'),
    (3, 'Robert', 'Brown', 'robert.brown@example.com', '555-123-4567'),
    (4, 'Emily', 'Davis', 'emily.davis@example.com', '333-444-5555'),
    (5, 'Michael', 'Wilson', 'michael.wilson@example.com', '666-777-8888');

-- Insert sample data into orders
INSERT INTO orders (order_id, customer_id, order_date, total_amount)
VALUES 
    (101, 1, '2025-03-01', 1499.97),
    (102, 2, '2025-03-05', 699.97),
    (103, 3, '2025-03-10', 199.99),
    (104, 1, '2025-03-15', 1249.97),
    (105, 2, '2025-03-20', 499.99),
    (106, 1, '2025-03-25', 999.99),
    (107, 4, '2025-03-30', 299.99);
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    AVG(o.total_amount) AS average_order_value
FROM 
    customers c
JOIN 
    orders o 
ON 
    c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, customer_name
ORDER BY 
    average_order_value DESC;
-- View all customers
SELECT * FROM customers;

-- View all orders
SELECT * FROM orders;

--07
-- Create customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15)
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

--08
SELECT 
    p.PRODUCT_NAME,
    COUNT(o.ORDER_ID) AS ORDER_COUNT
FROM 
    products p
LEFT JOIN 
    orders o ON p.PRODUCT_ID = o.PRODUCT_ID
GROUP BY 
    p.PRODUCT_NAME
ORDER BY 
    ORDER_COUNT DESC;

--09
SELECT 
    c.CUST_ID,
    c.CUST_NAME,
    c.CITY,
    o.ORDER_ID,
    p.PRODUCT_NAME
FROM 
    customers c
JOIN 
    orders o ON c.CUST_ID = o.CUST_ID
JOIN 
    products p ON o.PRODUCT_ID = p.PRODUCT_ID
WHERE 
    p.PRODUCT_NAME = :product_name;

--10
SELECT 
    SUM(o.TOTAL_AMOUNT) AS Total_Revenue
FROM 
    orders o
WHERE 
    o.ORDER_DATE BETWEEN :start_date AND :end_date;

=====================================Task 4. Subquery and its type=============================
--01
SELECT 
    c.CUSTOMER_ID, 
    c.CUSTOMER_NAME
FROM 
    customers c
LEFT JOIN 
    orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
WHERE 
    o.ORDER_ID IS NULL;

--02
SELECT 
    COUNT(p.PRODUCT_ID) AS Total_Products
FROM 
    products p
WHERE 
    p.STOCK_QUANTITY > 0;

--03
SELECT 
    SUM(o.TOTAL_AMOUNT) AS Total_Revenue
FROM 
    orders o;
SELECT 
    SUM(p.STOCK_QUANTITY * p.PRODUCT_PRICE) AS Total_Stock_Value
FROM 
    products p;

--04
SELECT 
    AVG(oi.QUANTITY) AS Avg_Quantity_Ordered,
    c.CATEGORY_NAME
FROM 
    order_items oi
JOIN 
    products p ON oi.PRODUCT_ID = p.PRODUCT_ID
JOIN 
    categories c ON p.CATEGORY_ID = c.CATEGORY_ID
WHERE 
    c.CATEGORY_NAME = :category_name
GROUP BY 
    c.CATEGORY_NAME;

--05
SELECT 
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME,
    SUM(o.TOTAL_AMOUNT) AS Total_Revenue
FROM 
    customers c
JOIN 
    orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
WHERE 
    c.CUSTOMER_ID = :customer_id
GROUP BY 
    c.CUSTOMER_ID, c.CUSTOMER_NAME;

--06
SELECT 
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME,
    COUNT(o.ORDER_ID) AS Number_of_Orders
FROM 
    customers c
JOIN 
    orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
GROUP BY 
    c.CUSTOMER_ID, c.CUSTOMER_NAME
ORDER BY 
    Number_of_Orders DESC
LIMIT 1;

--07
SELECT 
    c.CATEGORY_NAME,
    SUM(oi.QUANTITY) AS Total_Quantity_Ordered
FROM 
    order_items oi
JOIN 
    products p ON oi.PRODUCT_ID = p.PRODUCT_ID
JOIN 
    categories c ON p.CATEGORY_ID = c.CATEGORY_ID
GROUP BY 
    c.CATEGORY_NAME
ORDER BY 
    Total_Quantity_Ordered DESC
LIMIT 1;

--08
SELECT 
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME,
    SUM(o.TOTAL_AMOUNT) AS Total_Spending
FROM 
    customers c
JOIN 
    orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
GROUP BY 
    c.CUSTOMER_ID, c.CUSTOMER_NAME
ORDER BY 
    Total_Spending DESC
LIMIT 1;

--09
SELECT 
    ROUND(SUM(o.TOTAL_AMOUNT) / COUNT(o.ORDER_ID), 2) AS Average_Order_Value
FROM 
    orders o;

--10
SELECT 
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME,
    COUNT(o.ORDER_ID) AS Order_Count
FROM 
    customers c
LEFT JOIN 
    orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
GROUP BY 
    c.CUSTOMER_ID, c.CUSTOMER_NAME
ORDER BY 
    Order_Count DESC;




















