1. Write an SQL query to retrieve the names and emails of all customers. 

SELECT 
    CONCAT(FirstName, ' ', LastName) AS FullName,
    Email
FROM 
    Customers;
2. Write an SQL query to list all orders with their order dates and corresponding customer
names.

SELECT 
    O.OrderID,
    O.OrderDate,
    CONCAT(C.FirstName, ' ', C.LastName) AS CustomerName
FROM 
    Orders O
JOIN 
    Customers C ON O.CustomerID = C.CustomerID;
3. Write an SQL query to insert a new customer record into the "Customers" table. Include
customer information such as name, email, and address.

INSERT INTO Customers (FirstName, LastName, Email, Phone, Address)
VALUES 
('Alex', 'Brown', 'alex.brown@example.com', '111-222-3333', '500 River St, Houston, TX');

4. Write an SQL query to update the prices of all electronic gadgets in the "Products" table by
increasing them by 10%.

UPDATE Products
SET Price = Price * 1.10;

5. Write an SQL query to delete a specific order and its associated order details from the
"Orders" and "OrderDetails" tables. Allow users to input the order ID as a parameter
DECLARE @OrderID INT = 5; -- Set the OrderID dynamically

-- Delete from OrderDetails first due to FK constraint
DELETE FROM OrderDetails
WHERE OrderID = @OrderID;

-- Delete from Orders
DELETE FROM Orders
WHERE OrderID = @OrderID;

6. Write an SQL query to insert a new order into the "Orders" table. Include the customer ID,
order date, and any other necessary information.

INSERT INTO Orders (CustomerID, OrderDate, TotalAmount)
VALUES 
(3, '2025-03-15', 649.99);

7. Write an SQL query to update the contact information (e.g., email and address) of a specific
customer in the "Customers" table. Allow users to input the customer ID and new contact
information.

DECLARE @CustomerID INT = 3; -- Specify the customer ID to update
DECLARE @NewEmail NVARCHAR(100) = 'michael.new@example.com'; -- New email
DECLARE @NewAddress NVARCHAR(255) = '123 New Pine St, Boston, MA'; -- New address

-- Update query
UPDATE Customers
SET 
    Email = @NewEmail,
    Address = @NewAddress
WHERE 
    CustomerID = @CustomerID;

8. Write an SQL query to recalculate and update the total cost of each order in the "Orders"
table based on the prices and quantities in the "OrderDetails" table.

UPDATE O
SET O.TotalAmount = (
    SELECT SUM(OD.Quantity * P.Price)
    FROM OrderDetails OD
    JOIN Products P ON OD.ProductID = P.ProductID
    WHERE OD.OrderID = O.OrderID
)
FROM Orders O;

9. Write an SQL query to delete all orders and their associated order details for a specific
customer from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID
as a parameter.

DECLARE @CustomerID INT = 3; -- Specify the CustomerID to delete orders

-- Delete from OrderDetails first due to FK constraint
DELETE FROM OrderDetails
WHERE OrderID IN (
    SELECT OrderID FROM Orders WHERE CustomerID = @CustomerID
);

-- Delete from Orders
DELETE FROM Orders
WHERE CustomerID = @CustomerID;

10. Write an SQL query to insert a new electronic gadget product into the "Products" table,
including product name, category, price, and any other relevant details.

INSERT INTO Products (ProductName, Description, Price)
VALUES 
('Smart Home Hub', 'AI-powered home automation device', 299.99);

11. Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from
"Pending" to "Shipped"). Allow users to input the order ID and the new status

ALTER TABLE Orders
ADD OrderStatus NVARCHAR(50) DEFAULT 'Pending';

12. Write an SQL query to calculate and update the number of orders placed by each customer
in the "Customers" table based on the data in the "Orders" table.

ALTER TABLE Customers
ADD OrderCount INT DEFAULT 0;



